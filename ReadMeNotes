Course: Core Java for Automation Testers + Interview Programs

3] Syntax for creating object
      FirstClass fn = new FirstClass();


4] Using object

package coreJavaTraining;

public class FirstClass {

    //Methods
    public void getData() {
//        static int a = 4;
        System.out.println("I am in method");
//        return "hello";
    }

    public static void main(String[] args) {
      FirstClass fn = new FirstClass();
      fn.getData();

        //        System.out.println(a);
        System.out.println("Hello World");

    }
}

//Result
//        I am in method
//        Hello World
===
5b] Using object to get variable value in class
package coreJavaTraining;

public class FirstClass {

    int b= 4;
    //Methods
    public void getData() {
//        static int a = 4;
        System.out.println("I am in method");
//        return "hello";
    }

    public static void main(String[] args) {
      FirstClass fn = new FirstClass();
      fn.getData();
      System.out.println(fn.b);

        //        System.out.println(a);
        System.out.println("Hello World");

    }
}

//Result
//I am in method
//4
//        Hello World

6]  Created 2nd class, called the 2nd class method from first class

package coreJavaTraining;

public class Secondclass {

    public void setData() {
        System.out.println("I am in second class method");
    }

    public static void main(String[] args) {

    }
}
==
package coreJavaTraining;

public class FirstClass {

    int b= 4;
    //Methods
    public void getData() {
//        static int a = 4;
        System.out.println("I am in method");
//        return "hello";
    }

    public static void main(String[] args) {
      FirstClass fn = new FirstClass();
      Secondclass sn = new Secondclass();
      sn.setData();

      fn.getData();
      System.out.println(fn.b);

        //        System.out.println(a);
        System.out.println("Hello World");

    }
}

//Result
//I am in second class method
//I am in method
//4
//        Hello World
===


7a] Two ways of defining string object - Interview
    /*String is class in java
    String: Its one of prebuilt class in java    - Interview

    How many ways string can be defined
    1] String literal
    2. By creating object of string  */

    String a = “hello”   //String literal
    String ab = new String(“hello”);   // with String class
    // now this object ab can perform all the string manipulation on this string Hello
    //

==7b]
        String a = "hello" ;  //String literal
        String b = "hello" ;  //String literal
//        as object a is already having "hello" string; it will simply point "hello" string for b.

//        here we are explicitly forcing to create object for this class b, though duplicate already present, still it will create
        String a = new String("hello");
        String b = new String("hello");

==
package coreJavaTraining;

public class stringclassdemo {

    public static void main(String[] args) {
/*String is class in java
String: Its one of prebuilt class in java    - Interview

How many ways string can be defined
1] String literal
2. By creating object of string  */

        String a = "hello" ;  //String literal
        String ab = new String("hello");   // with String class
// now this object ab can perform all the string manipulation on this string Hello
//



        String a = "hello" ;  //String literal
        String b = "hello" ;  //String literal
//        as object a is already having "hello" string; it will simply point "hello" string for b.

//        here we are explicitly forcing to create object for this class b, though duplicate already present, still it will create
        String a = new String("hello");
        String b = new String("hello");


    }
}


==

8] String Class and their methods
==
package coreJavaTraining;

import java.util.Locale;

public class stringclassdemo {

    public static void main(String[] args) {
//String is class in java
        String a = "javatraining";  //String literal

        System.out.println(a.charAt(2));
        System.out.println(a.indexOf("l"));
        System.out.println(a.substring(3, 6));
        System.out.println(a.substring(5));
        System.out.println(a.concat("rahul teachers"));
//        a.length
        a.trim();  // remove whitespace
        a.toUpperCase();
        a.toLowerCase(Locale.ROOT);

        //Split
        String arr[]= a.split("t");
        System.out.println(arr[0]);
        System.out.println(arr[1]);

//        replace
        System.out.println(a.replace("t","s"));  //javasraining

    }
}
/*
Result
v
-1
atr
raining
javatrainingrahul teachers
java
raining
javasraining

 */

==

10] Reverse String logic- palindrom
package coreJavaTraining;

public class reversedemo {

    public static void main(String[] args) {

//        int a[] = {4,5,5,5,4,6,6,9,4};
//        print unique number from the list - amazon
//        print the string in reverse  - yahoo

//        Given string identify if its palindrom

        String s= "madam";
        String t = "";
        for(int i =s.length()-1; i>=0 ; i--){
            t = t + s.charAt(i);
            System.out.println(s.charAt(i));  // for string can't use s[i]

        }
        System.out.println(t);

        if(s.equals(t))
        {
//            if its palindrom
            System.out.print("This is palindrom");
        } else {
            System.out.print("This is not palindrom");
        }
    }
}
/*
Result
m
a
d
a
m
madam
This is palindrom

 */

 11] For loop
 package coreJavaTraining;

 public class forloopexample {

     public static void main(String[] args) {

         //1 to 10
 //        for (Initialization;condition;increment)
         for ( int i=0; i<10; i++)
         {
             if(i==9)
           System.out.println(i);
             else
                 System.out.println("I didn't find number");

         }

 //        If -else
         if(5>2) {
             System.out.println("Success");
         }
         else{
                 System.out.println("fail");

             }



     }
 }
 /*
 Result


  */

  12] While loop
package coreJavaTraining;

public class whiledemo {

    public static void main(String[] args) {
// while loop

//        int i=0;
//        while(i<=10)
//        {
//            System.out.println(i);
//            i++;
//        }





//Do - while

int j=20;
do{
            System.out.println(j);
            j++;
    }while(j>30);
        System.out.println(j);
    }
}
/*
Result


 */


 16]

16] Nested for loop
package demopack;

public class nestedforloop {


    public static void main(String[] args) {
//        1printing pyramid
        for(int i=0; i <10; i++)  //outer for loop- this block will loop for 4 times
        {
            for(int j=0; j <10; j++)  // inner loop
            {
                System.out.println("j");
            }
     //       System.out.println("Inner loop finished");
        }
    }
}


16b] assignment- pyramid

package demopack;

public class nestedforloopassignment {

    public static void main(String[] args) {
//        nested loops
        int k =1;
        for(int i=0; i<4; i++)  //outer for loop- this block will loop for 4 times
        {
            System.out.println();
            for(int j=1; j<=4-i; j++)  // inner loop
            {
                System.out.print(k);
                k++;

            }
        }
    }
}

/*Result
1234
567
89
10

*/

18b] Reverse pyramid
package demopack;

public class assignment2ReversePyramid {

    public static void main(String[] args) {
//        nested loops
        int k =1;
        for(int i=1; i<5; i++)  //outer for loop- this block will loop for 4 times
        {
            for(int j=1; j<=i; j++)  // inner loop
            {
                System.out.print(k);
                System.out.print("\t");

                k++;

            }
            System.out.println();
        }
    }
}

/*Result
1
2	3
4	5	6
7	8	9	10

*/

18b] Rev Pyramid 3 6 9 12 15

package demopack;

public class assignment4RevPyramid36912 {


    public static void main(String[] args) {
//        nested loops
        int k =3;
        int l = 1;
        for(int i=1; i<5; i++)  //outer for loop- this block will loop for 4 times
        {
            for(int j=1; j<=i; j++)  // inner loop
            {
                System.out.print(k*l);
                System.out.print("\t");
                l++;
            }
            System.out.println();
        }
    }
}

/*Result
3
6	9
12	15	18
21	24	27	30
*/
===

20
Interface - class
Will have methods but not body

21
Classes should define and implement methods present in interfaces

CentralTraffic.java is interfacea
AustralianTraffic.java is class
ContinentalTraffic.java is interface

Interfaces-      public int a = 4;   // public access modifier  , all variables default public in interface

==
22. Interfaces code
package coreJavaTraining;

import demopack.CentralTraffic;

public class AustralianTraffic implements CentralTraffic, ContinentalTraffic {

        public static void main(String[] args) {
            CentralTraffic a =  new AustralianTraffic();
            a.redStop();
            a.FlashYellow();
            a.greenGo();


//            walkonsymbol() method is created in AustralianTraffic, so need to create new object for that, cant use central traffic object a
            AustralianTraffic at = new AustralianTraffic();
            at.walkonsymbol();

            ContinentalTraffic ct = new AustralianTraffic();
            ct.Trainsymbol();

        }

    @Override
    public void greenGo() {
        System.out.println("Green Go implemetation");
    }

    @Override
    public void redStop() {
        System.out.println("Red Stop implemetation");

    }

    @Override
    public void FlashYellow() {
        System.out.println("Flash Yellow implemetation");


    }

    public void walkonsymbol(){
        System.out.println("Walking");

    }

    @Override
    public void Trainsymbol() {

    }
}

==
package demopack;

public interface CentralTraffic {
     public int a = 4;   // public access modifier  , all variables default public in interface
    public void greenGo();
    public void redStop();
    public void FlashYellow();
}
==
package coreJavaTraining;

public interface ContinentalTraffic {

    public void Trainsymbol();
}
==

23. Abstract class
ParentAirCraft.java is Abstract Class
ChildEmirites.java  is child class which extends ParentAirCraft and declare bodyColor method




23 Abstract class:
Abstraction is a process of hiding the implementation details from the user.
 The user will have information on what the object does instead of how it does it.



Unlike interfaces, this Abstract class can have methods (Concrete) which have implementation as well.
So, with Abstract class only partial Abstraction is achieved.

Difference between Abstract class and Interfaces

Interfaces:
1] Interfaces contains only abstract methods
2] Access Specifiers for methods in interfaces must be public
3] Variables defined must be public, static, final
4] To implement an interface, we use implements keyword

Abstract Class:
1] Abstract class can contain abstract methods, concrete methods or both
2] Except private we can have any access specifier for methods in abstract class (Protected)
3] Except private variables, we  can have any access specifiers
4] To implement an Abstract we use keyword extends

===
23. Abstract class
ParentAirCraft.java is Abstract Class
ChildEmirites.java  is child class which extends ParentAirCraft and declare bodyColor method

package demopack;

public abstract class ParentAirCraft {

   public void engine()
   {
       System.out.println("Follow Engine Guidelines");
   }

   public void safetyGuidelines()
   {
       System.out.println("Follow Safety Guidelines");
   }

   public abstract void bodyColor();

}

// private is not allowed for methods in abstract class
===
package demopack;

public class ChildEmirites extends ParentAirCraft{
   public void main(String[] args)
   {
       ChildEmirites c = new ChildEmirites();
       c.engine();
       c.safetyGuidelines();
       c.bodyColor();


   }

   @Override
   public void bodyColor() {
       System.out.println("Red color on the body");
   }
}




===

Section 7 Importance of Inheritance

24: Usage

package coreJavaTraining;

public class parentClassDemo {
       String color = "red";

       public void Gear()
       {
           System.out.println("gear code is implemented");
       }
   public void breaks()
   {
       System.out.println("breaks code is implemented");
   }

   public void audioSystem()
   {
       System.out.println("audioSystem code is implemented");
   }

   public static void main(String[] args) {

   }


}
==
package coreJavaTraining;

public class childClassDemo extends parentClassDemo {
   public void engine()
   {
       System.out.println("New Engine");
   }

   public void color()
   {
       System.out.println(color);

   }

   public static void main(String[] args) {
       childClassDemo cd = new childClassDemo();
       cd.color();
       cd.Gear();
   }


}


//color variable coming from parentclass
==

25.

31
Multidimentional array

package coreJavaTraining;

public class ArraysDemo {

   public static void main(String[] args) {
//Multidimentional array - row, column

       int a[][] = new int[2][3];
       a[0][0]=2;
       a[0][1]=4;
       a[0][2]=5;
       a[1][0]=3;
       a[1][1]=4;
       a[1][2]=7;

       System.out.println(a[1][0]);


   }
}

/*
result
3
*/

===
package coreJavaTraining;

public class ArraysDemo {

    public static void main(String[] args) {
//Multidimentional array - row, column

        int a[][] = new int[2][3];
        a[0][0]=2;
        a[0][1]=4;
        a[0][2]=5;
        a[1][0]=3;
        a[1][1]=4;
        a[1][2]=7;
        int b[][] = {{2,4,5},{3,4,7}}; // way2 of writing

        System.out.println(a[1][0]);
        System.out.println("");
        System.out.println(b[1][0]);

    }
}

/*
 result
3
3
*/
==
=
package coreJavaTraining;

public class ArraysDemo {

    public static void main(String[] args) {
//Multidimentional array - row, column

        int a[][] = new int[2][3];
        a[0][0]=2;
        a[0][1]=4;
        a[0][2]=5;
        a[1][0]=3;
        a[1][1]=4;
        a[1][2]=7;
//        int b[][] = {{2,4,5},{3,4,7}}; // way2 of writing


        for (int i=0;i<2;i++) //row
        {
            for(int j=0;j<3;j++) // columns
            {
                System.out.println(a[i][j]);
            }
        }


//        System.out.println(a[1][0]);
//        System.out.println("");
//        System.out.println(b[1][0]);

    }
}

/*
 result
2
4
5
3
4
7
*/


==


